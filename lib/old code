/*
  classifyImage(File image) async {
    var output = await Tflite.runModelOnImage(
      path: image.path,
      numResults: 2,
      threshold: 0.5,
      imageMean: 127.5,
      imageStd: 127.5,
    );

    setState(() {
      _isLoading = false;
      outputs = output!;
    });
  }

  pickImage() async {
    // ignore: deprecated_member_use
    var image = await _imagePicker.getImage(source: ImageSource.gallery);
    if (image == null) return null;
    setState(() {
      _isLoading = true;
      _image = File(image.path);
    });
    classifyImage(_image!);
  }*/

   /*Future<void> loadModel() async {
      try {
        _interpreter = await Interpreter.fromAsset('assets/your_model.tflite');
        _output = List.filled(2, 0); // Assuming the output tensor has 2 elements
      } catch (e) {
        print('Error loading model: $e');
      }
    }*/


    /*/// Load tflite model from assets
      Future<void> loadModel() async {
        print('Loading interpreter options...');
        final interpreterOptions = InterpreterOptions();

        // Use XNNPACK Delegate
        if (Platform.isAndroid) {
          interpreterOptions.addDelegate(XNNPackDelegate());
        }

        // Use Metal Delegate
        if (Platform.isIOS) {
          interpreterOptions.addDelegate(GpuDelegate());
        }

        print('Loading interpreter...');
        _interpreter = await Interpreter.fromAsset('assets/tb_model.tflite',
            options: interpreterOptions);
      }*/

      /*/// Load Labels from assets
      Future<void> _loadLabels() async {
        print('Loading labels...');
        final labelsRaw = await rootBundle.loadString('assets/labels.txt');
        _labels = labelsRaw.split('\n');
      }*/

      // Inside initState()


      /*_isLoading = true;
          loadModel().then((value) {
            setState(() {
              _isLoading = false;
            });
          });*/